/* Robot.java */
/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;

import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot implements RobotConstants {


        private RobotWorldDec world;


        void setWorld(RobotWorld w) {
                world = (RobotWorldDec) w;
        }

        String salida=new String();

//boolean command(uniandes.lym.robot.view.Console sistema) :
  final public         boolean command(Console sistema) throws ParseException {int x,y;
                salida=new String(); //TODO COMO EMPIEZO CON EXEC Y DEF

    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MOV:
    case RIGHT:
    case PUT:
    case PICK:
    case POP:
    case HOP:
    case GO:
    case EXEC:
    case NEW:{
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RIGHT:{
          jj_consume_token(RIGHT);
          jj_consume_token(LPAREN);
          jj_consume_token(RPAREN);
world.turnRight();salida = "Command: Turnright";
          break;
          }
        case MOV:{
          jj_consume_token(MOV);
          jj_consume_token(LPAREN);
          x = num();
          jj_consume_token(RPAREN);
world.moveForward(x,false);salida = "Command: Moveforward ";
          break;
          }
        case HOP:{
          jj_consume_token(HOP);
          jj_consume_token(LPAREN);
          x = num();
          jj_consume_token(RPAREN);
world.moveForward(x,true);salida = "Command:Jumpforward ";
          break;
          }
        case GO:{
          jj_consume_token(GO);
          jj_consume_token(LPAREN);
          x = num();
          jj_consume_token(COMMA);
          y = num();
          jj_consume_token(RPAREN);
world.setPostion(x,y);salida = "Command:GO ";
          break;
          }
        case PUT:{
          jj_consume_token(PUT);
          jj_consume_token(LPAREN);
          put();
          jj_consume_token(RPAREN);
          break;
          }
        case PICK:{
          jj_consume_token(PICK);
          jj_consume_token(LPAREN);
          get();
          jj_consume_token(RPAREN);
          break;
          }
        case POP:{
          jj_consume_token(POP);
          jj_consume_token(LPAREN);
          x = num();
          jj_consume_token(RPAREN);
world.popBalloons(x); salida = "Comando:  Pop";
          break;
          }
        case EXEC:{
          executionCommand();
salida = "Comando:  Execution command";
          break;
          }
        case NEW:{
          definition();
salida = "Comando: Definition";
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(SEMICOLON);
try {
                                 Thread.sleep(900);
                    } catch (InterruptedException e) {
                                        System.err.format("IOException: %s%n", e);
                            }

                        sistema.printOutput(salida);
                        {if ("" != null) return true;}
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MOV:
        case RIGHT:
        case PUT:
        case PICK:
        case POP:
        case HOP:
        case GO:
        case EXEC:
        case NEW:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
      break;
      }
    case 0:{
      jj_consume_token(0);
{if ("" != null) return false;}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public void put() throws ParseException {int f=1; //pq = 1?	

    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHIPS:{
      jj_consume_token(CHIPS);
      jj_consume_token(COMMA);
      f = num();
world.putChips(f); salida = "Command:  Put Chips";
      break;
      }
    case BALLOONS:{
      jj_consume_token(BALLOONS);
      jj_consume_token(COMMA);
      f = num();
world.putBalloons(f); salida = "Command:  Put Balloons";
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void get() throws ParseException {int f=1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHIPS:{
      jj_consume_token(CHIPS);
      jj_consume_token(COMMA);
      f = num();
world.pickChips(f);salida = "Command:  Pick chips";
      break;
      }
    case BALLOONS:{
      jj_consume_token(BALLOONS);
      jj_consume_token(COMMA);
      f = num();
world.grabBalloons(f);salida="Command:  Pick balloons";
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */
  final public 
        int num() throws ParseException, Error {int total=1;
    jj_consume_token(NUM);
try
                        {
                                total = Integer.parseInt(token.image);
                        }
                        catch (NumberFormatException ee)
                        {
                                {if (true) throw new Error("Number out of bounds: "+token.image+" !!");}
                        }
                        {if ("" != null) return total;}
    throw new Error("Missing return statement in function");
}

// =================================================================================
// EXEC
// =================================================================================
  final public 
void executionCommand() throws ParseException {
    jj_consume_token(EXEC);
    block();
}

// =================================================================================
// DEFINITION
// =================================================================================
  final public 
void definition() throws ParseException {
    jj_consume_token(NEW);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      variableDefinition();
      break;
      }
    case MACRO:{
      macroDefinition();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// =================================================================================
// BLOCKS
// =================================================================================
  final public 
void block() throws ParseException {
    jj_consume_token(LBRACE);
    label_2:
    while (true) {
      instruction();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PICK:
      case POP:
      case SAFEEXEC:
      case WALK:
      case JUMP:
      case DROP:
      case GRAB:
      case LETGO:
      case TURNTOMY:
      case TURNTOTHE:
      case MOVES:
      case NOP:
      case VAR:
      case IF:
      case DO:
      case REP:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(RBRACE);
}

  final public void instruction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PICK:
    case POP:
    case SAFEEXEC:
    case WALK:
    case JUMP:
    case DROP:
    case GRAB:
    case LETGO:
    case TURNTOMY:
    case TURNTOTHE:
    case MOVES:
    case NOP:
    case VAR:
    case IDENTIFIER:{
      comando();
      break;
      }
    case IF:
    case DO:
    case REP:{
      controlStructure();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// =================================================================================
// COMMANDS
// =================================================================================
  final public 
void comando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      variableDefinition();
      break;
      }
    case IDENTIFIER:{
      macroInvocation();
      break;
      }
    case TURNTOMY:{
      turnToMy();
      break;
      }
    case TURNTOTHE:{
      turnToThe();
      break;
      }
    case PICK:
    case POP:
    case WALK:
    case JUMP:
    case DROP:
    case GRAB:
    case LETGO:{
      simpleCommand();
      break;
      }
    case MOVES:{
      moves();
      break;
      }
    case NOP:{
      nop();
      break;
      }
    case SAFEEXEC:{
      safeExe();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void simpleCommand() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WALK:{
      jj_consume_token(WALK);
      break;
      }
    case JUMP:{
      jj_consume_token(JUMP);
      break;
      }
    case DROP:{
      jj_consume_token(DROP);
      break;
      }
    case PICK:{
      jj_consume_token(PICK);
      break;
      }
    case GRAB:{
      jj_consume_token(GRAB);
      break;
      }
    case LETGO:{
      jj_consume_token(LETGO);
      break;
      }
    case POP:{
      jj_consume_token(POP);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    value();
    jj_consume_token(RPAREN);
}

  final public void turnToMy() throws ParseException {
    jj_consume_token(TURNTOMY);
    jj_consume_token(LPAREN);
    direction();
    jj_consume_token(RPAREN);
}

  final public void turnToThe() throws ParseException {
    jj_consume_token(TURNTOTHE);
    jj_consume_token(LPAREN);
    orientation();
    jj_consume_token(RPAREN);
}

  final public void moves() throws ParseException {
    jj_consume_token(MOVES);
    jj_consume_token(LPAREN);
    directions();
    jj_consume_token(RPAREN);
}

  final public void nop() throws ParseException {
    jj_consume_token(NOP);
}

  final public void safeExe() throws ParseException {
    jj_consume_token(SAFEEXEC);
    jj_consume_token(LPAREN);
    simpleCommand();
    jj_consume_token(RPAREN);
}

// =================================================================================
// CONTROL STRUCTURE
// =================================================================================
  final public 
void controlStructure() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:{
      conditional();
      break;
      }
    case DO:{
      loop();
      break;
      }
    case REP:{
      repeatTimes();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void loop() throws ParseException {
    jj_consume_token(DO);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ISBLOCKED:
    case ISFACING:
    case ZERO:{
      condition();
      break;
      }
    case NOT:{
      not();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(THEN);
}

  final public void repeatTimes() throws ParseException {
    jj_consume_token(REP);
    value();
    jj_consume_token(TIMES);
    block();
    jj_consume_token(PER);
}

// =================================================================================
// CONDITIONALS
// =================================================================================
  final public 
void conditional() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ISBLOCKED:
    case ISFACING:
    case ZERO:{
      condition();
      break;
      }
    case NOT:{
      not();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
}

  final public void condition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ISBLOCKED:{
      isBlocked();
      break;
      }
    case ISFACING:{
      isFacing();
      break;
      }
    case ZERO:{
      zero();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void isBlocked() throws ParseException {
    jj_consume_token(ISBLOCKED);
    jj_consume_token(LPAREN);
    direction();
    jj_consume_token(RPAREN);
}

  final public void isFacing() throws ParseException {
    jj_consume_token(ISFACING);
    jj_consume_token(LPAREN);
    orientation();
    jj_consume_token(RPAREN);
}

  final public void zero() throws ParseException {
    jj_consume_token(ZERO);
    jj_consume_token(LPAREN);
    value();
    jj_consume_token(RPAREN);
}

  final public void not() throws ParseException {
    jj_consume_token(NOT);
    jj_consume_token(LPAREN);
    condition();
    jj_consume_token(RPAREN);
}

// =================================================================================
// VARIABLES
// =================================================================================
  final public 
void variableDefinition() throws ParseException {Token x;
    jj_consume_token(VAR);
    x = jj_consume_token(IDENTIFIER);
    jj_consume_token(EQUALS);
    value();
}

  final public void variable() throws ParseException {
    jj_consume_token(NOP);
}

// =================================================================================
// MACROS
// =================================================================================
  final public 
void macroDefinition() throws ParseException {Token x;
    jj_consume_token(MACRO);
    x = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    paramsDef();
    jj_consume_token(RPAREN);
    block();
}

  final public void macroInvocation() throws ParseException {Token macro;
    macro = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    paramsCall();
    jj_consume_token(RPAREN);
}

  final public void paramsDef() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
    }
}

  final public void paramsCall() throws ParseException {
    value();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      value();
    }
}

// =================================================================================
// VALUE
// =================================================================================
  final public 
void value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      num();
      break;
      }
    case NOP:{
      variable();
      break;
      }
    case SIZE:
    case MYX:
    case MYY:
    case MYCHIPS:
    case MYBALLOONS:
    case BALLOONSHERE:
    case CHIPSHERE:
    case ROOMFORCHIPS:{
      constant();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void constant() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SIZE:{
      jj_consume_token(SIZE);
      break;
      }
    case MYX:{
      jj_consume_token(MYX);
      break;
      }
    case MYY:{
      jj_consume_token(MYY);
      break;
      }
    case MYCHIPS:{
      jj_consume_token(MYCHIPS);
      break;
      }
    case MYBALLOONS:{
      jj_consume_token(MYBALLOONS);
      break;
      }
    case BALLOONSHERE:{
      jj_consume_token(BALLOONSHERE);
      break;
      }
    case CHIPSHERE:{
      jj_consume_token(CHIPSHERE);
      break;
      }
    case ROOMFORCHIPS:{
      jj_consume_token(ROOMFORCHIPS);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// =================================================================================
// DIRECTIONS
// =================================================================================
  final public 
void directions() throws ParseException {
    direction();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      direction();
    }
}

  final public void direction() throws ParseException {
    jj_consume_token(LEFT);
    jj_consume_token(RIGHT);
    jj_consume_token(BACK);
}

  final public void orientation() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NORTH:{
      jj_consume_token(NORTH);
      break;
      }
    case EAST:{
      jj_consume_token(EAST);
      break;
      }
    case SOUTH:{
      jj_consume_token(SOUTH);
      break;
      }
    case WEST:{
      jj_consume_token(WEST);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xfe0,0xfe0,0xfe1,0x0,0x0,0x0,0x7fe300,0x7fe300,0x7fe300,0x7c300,0x0,0x80001000,0x80001000,0x80000000,0x0,0x0,0x7fc00000,0x7f800000,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0xc00,0xc00,0xc00,0x300,0x300,0x3000,0x80145000,0x80145000,0x80001000,0x0,0x144000,0x3,0x3,0x3,0x8000000,0x8000000,0x0,0x0,0x8000000,0xf0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,};
	}

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new RobotTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[66];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 20; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 66; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
